(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-7d16a82e"],{"0da2":function(t,e,r){"use strict";r.r(e);var i=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"UnrealBloom-container"},[r("el-dialog",{attrs:{title:"虚幻光影",width:"500px",center:"",modal:!1,visible:t.$store.state.topNav.unrealBloomVisible},on:{"update:visible":function(e){return t.$set(t.$store.state.topNav,"unrealBloomVisible",e)}}},[r("div",{staticClass:"UnrealBloom-main"},[r("MMD-switch",{attrs:{title:"启用"},model:{value:t.use,callback:function(e){t.use=e},expression:"use"}}),r("MMD-slider",{attrs:{title:"发光阈值",min:0,max:1,step:.01},model:{value:t.pass.threshold,callback:function(e){t.$set(t.pass,"threshold",e)},expression:"pass.threshold"}}),r("MMD-slider",{attrs:{title:"发光强度",min:0,max:5,step:.01},model:{value:t.pass.strength,callback:function(e){t.$set(t.pass,"strength",e)},expression:"pass.strength"}}),r("MMD-slider",{attrs:{title:"发光半径",min:0,max:1,step:.01},model:{value:t.pass.radius,callback:function(e){t.$set(t.pass,"radius",e)},expression:"pass.radius"}})],1)])],1)},o=[],a=r("5a89"),s=r("1b53"),l=r("e9d2"),n={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new a["k"](0)},defaultOpacity:{value:0}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = uv;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec3 defaultColor;","uniform float defaultOpacity;","uniform float luminosityThreshold;","uniform float smoothWidth;","varying vec2 vUv;","void main() {","\tvec4 texel = texture2D( tDiffuse, vUv );","\tvec3 luma = vec3( 0.299, 0.587, 0.114 );","\tfloat v = dot( texel.xyz, luma );","\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );","\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );","\tgl_FragColor = mix( outputColor, texel, alpha );","}"].join("\n")},u=function(t,e,r,i){s["a"].call(this),this.strength=void 0!==e?e:1,this.radius=r,this.threshold=i,this.resolution=void 0!==t?new a["mb"](t.x,t.y):new a["mb"](256,256),this.clearColor=new a["k"](0,0,0);var o={minFilter:a["z"],magFilter:a["z"],format:a["U"]};this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;var u=Math.round(this.resolution.x/2),h=Math.round(this.resolution.y/2);this.renderTargetBright=new a["pb"](u,h,o),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(var m=0;m<this.nMips;m++){var d=new a["pb"](u,h,o);d.texture.name="UnrealBloomPass.h"+m,d.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(d);var c=new a["pb"](u,h,o);c.texture.name="UnrealBloomPass.v"+m,c.texture.generateMipmaps=!1,this.renderTargetsVertical.push(c),u=Math.round(u/2),h=Math.round(h/2)}void 0===n&&console.error("UnrealBloomPass relies on LuminosityHighPassShader");var v=n;this.highPassUniforms=a["lb"].clone(v.uniforms),this.highPassUniforms["luminosityThreshold"].value=i,this.highPassUniforms["smoothWidth"].value=.01,this.materialHighPassFilter=new a["Y"]({uniforms:this.highPassUniforms,vertexShader:v.vertexShader,fragmentShader:v.fragmentShader,defines:{}}),this.separableBlurMaterials=[];var f=[3,5,7,9,11];for(u=Math.round(this.resolution.x/2),h=Math.round(this.resolution.y/2),m=0;m<this.nMips;m++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(f[m])),this.separableBlurMaterials[m].uniforms["texSize"].value=new a["mb"](u,h),u=Math.round(u/2),h=Math.round(h/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms["blurTexture1"].value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms["blurTexture2"].value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms["blurTexture3"].value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms["blurTexture4"].value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms["blurTexture5"].value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms["bloomStrength"].value=e,this.compositeMaterial.uniforms["bloomRadius"].value=.1,this.compositeMaterial.needsUpdate=!0;var p=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms["bloomFactors"].value=p,this.bloomTintColors=[new a["nb"](1,1,1),new a["nb"](1,1,1),new a["nb"](1,1,1),new a["nb"](1,1,1),new a["nb"](1,1,1)],this.compositeMaterial.uniforms["bloomTintColors"].value=this.bloomTintColors,void 0===l["a"]&&console.error("UnrealBloomPass relies on CopyShader");var g=l["a"];this.copyUniforms=a["lb"].clone(g.uniforms),this.copyUniforms["opacity"].value=1,this.materialCopy=new a["Y"]({uniforms:this.copyUniforms,vertexShader:g.vertexShader,fragmentShader:g.fragmentShader,blending:a["b"],depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this.oldClearColor=new a["k"],this.oldClearAlpha=1,this.basic=new a["F"],this.fsQuad=new s["a"].FullScreenQuad(null)};u.prototype=Object.assign(Object.create(s["a"].prototype),{constructor:u,dispose:function(){for(var t=0;t<this.renderTargetsHorizontal.length;t++)this.renderTargetsHorizontal[t].dispose();for(t=0;t<this.renderTargetsVertical.length;t++)this.renderTargetsVertical[t].dispose();this.renderTargetBright.dispose()},setSize:function(t,e){var r=Math.round(t/2),i=Math.round(e/2);this.renderTargetBright.setSize(r,i);for(var o=0;o<this.nMips;o++)this.renderTargetsHorizontal[o].setSize(r,i),this.renderTargetsVertical[o].setSize(r,i),this.separableBlurMaterials[o].uniforms["texSize"].value=new a["mb"](r,i),r=Math.round(r/2),i=Math.round(i/2)},render:function(t,e,r,i,o){this.oldClearColor.copy(t.getClearColor()),this.oldClearAlpha=t.getClearAlpha();var a=t.autoClear;t.autoClear=!1,t.setClearColor(this.clearColor,0),o&&t.state.buffers.stencil.setTest(!1),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=r.texture,t.setRenderTarget(null),t.clear(),this.fsQuad.render(t)),this.highPassUniforms["tDiffuse"].value=r.texture,this.highPassUniforms["luminosityThreshold"].value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,t.setRenderTarget(this.renderTargetBright),t.clear(),this.fsQuad.render(t);for(var s=this.renderTargetBright,l=0;l<this.nMips;l++)this.fsQuad.material=this.separableBlurMaterials[l],this.separableBlurMaterials[l].uniforms["colorTexture"].value=s.texture,this.separableBlurMaterials[l].uniforms["direction"].value=u.BlurDirectionX,t.setRenderTarget(this.renderTargetsHorizontal[l]),t.clear(),this.fsQuad.render(t),this.separableBlurMaterials[l].uniforms["colorTexture"].value=this.renderTargetsHorizontal[l].texture,this.separableBlurMaterials[l].uniforms["direction"].value=u.BlurDirectionY,t.setRenderTarget(this.renderTargetsVertical[l]),t.clear(),this.fsQuad.render(t),s=this.renderTargetsVertical[l];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms["bloomStrength"].value=this.strength,this.compositeMaterial.uniforms["bloomRadius"].value=this.radius,this.compositeMaterial.uniforms["bloomTintColors"].value=this.bloomTintColors,t.setRenderTarget(this.renderTargetsHorizontal[0]),t.clear(),this.fsQuad.render(t),this.fsQuad.material=this.materialCopy,this.copyUniforms["tDiffuse"].value=this.renderTargetsHorizontal[0].texture,o&&t.state.buffers.stencil.setTest(!0),this.renderToScreen?(t.setRenderTarget(null),this.fsQuad.render(t)):(t.setRenderTarget(r),this.fsQuad.render(t)),t.setClearColor(this.oldClearColor,this.oldClearAlpha),t.autoClear=a},getSeperableBlurMaterial:function(t){return new a["Y"]({defines:{KERNEL_RADIUS:t,SIGMA:t},uniforms:{colorTexture:{value:null},texSize:{value:new a["mb"](.5,.5)},direction:{value:new a["mb"](.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})},getCompositeMaterial:function(t){return new a["Y"]({defines:{NUM_MIPS:t},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\tuniform sampler2D dirtTexture;\t\t\t\tuniform float bloomStrength;\t\t\t\tuniform float bloomRadius;\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t}\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t}"})}}),u.BlurDirectionX=new a["mb"](1,0),u.BlurDirectionY=new a["mb"](0,1);var h={data:function(){var t=.2,e=2,r=.5;return{pass:new u(new THREE.Vector2(window.innerWidth,window.innerHeight),t,e,r),controller:{use:!1}}},computed:{use:{get:function(){return this.controller.use},set:function(t){this.controller.use=t,t?MMD.addPass(this.pass):MMD.removePass(this.pass)}}}},m=h,d=r("2877"),c=Object(d["a"])(m,i,o,!1,null,"01f8c20f",null);e["default"]=c.exports},"1b53":function(t,e,r){"use strict";r.d(e,"a",(function(){return o}));var i=r("5a89");function o(){this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}Object.assign(o.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}),o.FullScreenQuad=function(){var t=new i["P"](-1,1,1,-1,0,1),e=new i["Q"](2,2),r=function(t){this._mesh=new i["E"](e,t)};return Object.defineProperty(r.prototype,"material",{get:function(){return this._mesh.material},set:function(t){this._mesh.material=t}}),Object.assign(r.prototype,{dispose:function(){this._mesh.geometry.dispose()},render:function(e){e.render(this._mesh,t)}}),r}()},e9d2:function(t,e,r){"use strict";r.d(e,"a",(function(){return i}));var i={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","\tvUv = uv;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","\tvec4 texel = texture2D( tDiffuse, vUv );","\tgl_FragColor = opacity * texel;","}"].join("\n")}}}]);